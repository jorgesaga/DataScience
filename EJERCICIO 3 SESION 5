#Ejercicio 3

#Resuelva las ecuaciones de Painlevé numericamente para encontrar la
#distribución Tracy-Widom para β = 1, 2.

#Encontrando la distribución de F2

import numpy as np
import scipy as scipy
from scipy import integrate
import matplotlib.pyplot as plt

def vdp1(t, y):
    return np.array([y[1], t*y[0]+2*y[0]**3,y[3],y[0]**2])
t0, t1 = 5, -8      #star and end
#dx=0.005
t = np.linspace(t0, t1, 2600)  # the points of evaluation of solution
y0 = [scipy.special.airy(t0)[0],scipy.special.airy(t0)[1],0,(scipy.special.airy(t0)[0])**2]  # initial value
y = np.zeros((len(t), len(y0)))   # array for solution
y[0, :] = y0
r = integrate.ode(vdp1).set_integrator("dopri5")  # choice of method
r.set_initial_value(y0, t0)   # initial values
for i in range(1, t.size):
  y[i, :] = r.integrate(t[i]) # get one more value, add it to the array
  
F2=np.exp(-y[:,2]) 
f2=np.gradient(F2,t)

def vdp1(t, x):
    return np.array([x[1], t*x[0]+2*x[0]**3,-x[0],x[0]**2])
t0, t1 = 5, -8      #star and end
#dx=0.005
t = np.linspace(t0, t1, 2600)  # the points of evaluation of solution
x0 = [scipy.special.airy(t0)[0],scipy.special.airy(t0)[1],0,0]  # initial value
x = np.zeros((len(t), len(x0)))   # array for solution
x[0, :] = x0
r = integrate.ode(vdp1).set_integrator("dopri5")  # choice of method
r.set_initial_value(x0, t0)   # initial values
for i in range(1, t.size):
  x[i, :] = r.integrate(t[i]) # get one more value, add it to the array
  
F1=np.sqrt(F2*np.exp(-x[:,2])) 
f1=np.gradient(F1,t)
plt.plot(t, f2,label="Beta=2")
plt.plot(t, f1,label="Beta=1")
plt.title("Distribuciones Tracy-Widom")
plt.legend()
plt.show()
